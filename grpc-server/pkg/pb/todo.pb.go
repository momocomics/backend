// Code generated by protoc-gen-go. DO NOT EDIT.
// source: todo.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Category struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Category) Reset()         { *m = Category{} }
func (m *Category) String() string { return proto.CompactTextString(m) }
func (*Category) ProtoMessage()    {}
func (*Category) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{0}
}

func (m *Category) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Category.Unmarshal(m, b)
}
func (m *Category) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Category.Marshal(b, m, deterministic)
}
func (m *Category) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Category.Merge(m, src)
}
func (m *Category) XXX_Size() int {
	return xxx_messageInfo_Category.Size(m)
}
func (m *Category) XXX_DiscardUnknown() {
	xxx_messageInfo_Category.DiscardUnknown(m)
}

var xxx_messageInfo_Category proto.InternalMessageInfo

func (m *Category) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Task struct {
	Description          string    `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Category             *Category `protobuf:"bytes,2,opt,name=category,proto3" json:"category,omitempty"`
	Id                   string    `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Done                 bool      `protobuf:"varint,4,opt,name=done,proto3" json:"done,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4b95d0c4e09639, []int{1}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Task) GetCategory() *Category {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetDone() bool {
	if m != nil {
		return m.Done
	}
	return false
}

func init() {
	proto.RegisterType((*Category)(nil), "todo.Category")
	proto.RegisterType((*Task)(nil), "todo.Task")
}

func init() {
	proto.RegisterFile("todo.proto", fileDescriptor_0e4b95d0c4e09639)
}

var fileDescriptor_0e4b95d0c4e09639 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0xc9, 0x4f, 0xc9,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0xe4, 0xb8, 0x38, 0x9c, 0x13,
	0x4b, 0x52, 0xd3, 0xf3, 0x8b, 0x2a, 0x85, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0xa5, 0x0a, 0x2e, 0x96, 0x90, 0xc4, 0xe2, 0x6c, 0x21,
	0x05, 0x2e, 0xee, 0x94, 0xd4, 0xe2, 0xe4, 0xa2, 0xcc, 0x82, 0x92, 0xcc, 0xfc, 0x3c, 0xa8, 0x12,
	0x64, 0x21, 0x21, 0x2d, 0x2e, 0x8e, 0x64, 0xa8, 0x49, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46,
	0x7c, 0x7a, 0x60, 0xeb, 0x60, 0xe6, 0x07, 0xc1, 0xe5, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24,
	0x98, 0xc1, 0x86, 0x30, 0x65, 0xa6, 0x80, 0x6c, 0x4e, 0xc9, 0xcf, 0x4b, 0x95, 0x60, 0x51, 0x60,
	0xd4, 0xe0, 0x08, 0x02, 0xb3, 0x8d, 0xfc, 0xb9, 0x58, 0x42, 0xf2, 0x53, 0xf2, 0x85, 0xd4, 0xb8,
	0x58, 0x7c, 0x32, 0x8b, 0x4b, 0x84, 0xd0, 0x4c, 0x93, 0xe2, 0x82, 0xf0, 0x41, 0xae, 0x53, 0x62,
	0x30, 0x60, 0x14, 0x92, 0xe7, 0x62, 0x76, 0x4c, 0x49, 0x11, 0x42, 0x12, 0x46, 0x55, 0xe2, 0xc4,
	0x12, 0xc5, 0x54, 0x90, 0x94, 0xc4, 0x06, 0xf6, 0xbd, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xd3,
	0xa8, 0x74, 0xa2, 0x0b, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TodoClient is the client API for Todo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TodoClient interface {
	List(ctx context.Context, in *Category, opts ...grpc.CallOption) (Todo_ListClient, error)
	Add(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error)
}

type todoClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoClient(cc grpc.ClientConnInterface) TodoClient {
	return &todoClient{cc}
}

func (c *todoClient) List(ctx context.Context, in *Category, opts ...grpc.CallOption) (Todo_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Todo_serviceDesc.Streams[0], "/todo.Todo/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Todo_ListClient interface {
	Recv() (*Task, error)
	grpc.ClientStream
}

type todoListClient struct {
	grpc.ClientStream
}

func (x *todoListClient) Recv() (*Task, error) {
	m := new(Task)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoClient) Add(ctx context.Context, in *Task, opts ...grpc.CallOption) (*Task, error) {
	out := new(Task)
	err := c.cc.Invoke(ctx, "/todo.Todo/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoServer is the server API for Todo service.
type TodoServer interface {
	List(*Category, Todo_ListServer) error
	Add(context.Context, *Task) (*Task, error)
}

// UnimplementedTodoServer can be embedded to have forward compatible implementations.
type UnimplementedTodoServer struct {
}

func (*UnimplementedTodoServer) List(req *Category, srv Todo_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (*UnimplementedTodoServer) Add(ctx context.Context, req *Task) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}

func RegisterTodoServer(s *grpc.Server, srv TodoServer) {
	s.RegisterService(&_Todo_serviceDesc, srv)
}

func _Todo_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Category)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServer).List(m, &todoListServer{stream})
}

type Todo_ListServer interface {
	Send(*Task) error
	grpc.ServerStream
}

type todoListServer struct {
	grpc.ServerStream
}

func (x *todoListServer) Send(m *Task) error {
	return x.ServerStream.SendMsg(m)
}

func _Todo_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.Todo/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServer).Add(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

var _Todo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "todo.Todo",
	HandlerType: (*TodoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Todo_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _Todo_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "todo.proto",
}
